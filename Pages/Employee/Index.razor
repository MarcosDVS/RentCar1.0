@page "/employee"
@inject IEmployeeServices employeeService
@inject IJSRuntime JS

<MenuDisplay />

<h3>Empleados (@Employees.Count)</h3>
<div class="mb-2">
    <button class="btn btn-success" @onclick="MostrarFormulario">
        Agregar
    </button>
</div>

<div class="container">
    @if (ShowForm)
    {
        <h3>@TituloForm</h3>
        <EditForm Model="request" OnValidSubmit="Send">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="mb-3 input-group">
                <label class="input-group-text">Nombre</label>
                <InputText class="form-control" @bind-Value="@request.Name"></InputText>
            </div>
            <div class="mb-3 input-group">
                <label class="input-group-text">Posición</label>
                <InputText class="form-control" @bind-Value="@request.Position"></InputText>
            </div>

            <div class="btn-group">
                <button type="submit" class="btn btn-outline-success">Guardar</button>
                <button @onclick="Cancelar" class="btn btn-outline-danger">Cancelar</button>
            </div>
        </EditForm>
        <br />
    }
    else
    {
        @foreach (var employee in Employees)
        {
            <div class="card" style="width: 18rem;">
                <div class="card-body">
                    <label class="card-title">@employee.Name</label>
                    <div class="card-text">
                        <label><b>Posición:</b> @employee.Position</label>
                    </div>
                    <button @onclick="()=>MostrarDetalles(employee.Id)" class="btn btn-info">
                        Detalles
                    </button>
                    <button @onclick="()=>Editar(employee)" class="btn btn-warning">
                        Editar
                    </button>
                    <button @onclick="()=>Eliminar(employee)" class="btn btn-danger">
                        Eliminar
                    </button>
                </div>
            </div>
        }
    }
    @if (ShowDetails)
    {
        <h3>Detalles del Empleado</h3>
        @if (SelectedEmployee != null)
        {
            <div class="card" style="width: 18rem;">
                <div class="card-body">
                    <h5 class="card-title">@SelectedEmployee.Name</h5>
                    <p class="card-text">
                        <b>Posición:</b> @SelectedEmployee.Position
                    </p>
                    <button @onclick="()=>Editar(SelectedEmployee)" class="btn btn-warning">
                        Editar
                    </button>
                    <button @onclick="Close" class="btn btn-danger">
                        Close
                    </button>
                </div>
            </div>
        }
        else
        {
            <p>No se ha seleccionado ningún empleado.</p>
        }
    }
</div>

@code {
    public string TituloForm => request.Id == 0 ? "Agregar empleado" : "Modificar empleado";

    public bool ShowForm { get; set; } = false;
    public bool ShowDetails { get; set; } = false;
    public string Filtro { get; set; } = "";
    public List<EmployeeResponse> Employees { get; set; } = new List<EmployeeResponse>();
    public EmployeeResponse SelectedEmployee { get; set; }

    public EmployeeRequest request = new EmployeeRequest();

    protected override async Task OnInitializedAsync()
    {
        await CargarEmployees();
    }

    public async Task CargarEmployees()
    {
        var resultado = await employeeService.Consultar(Filtro);
        if (resultado.Success)
        {
            Employees = resultado.Data;
        }
        else
        {
            // Manejar el error, mostrar mensaje o realizar alguna acción
        }
    }

    public async Task Send()
    {
        if (request.Id == 0)
        {
            var resultado = await employeeService.Crear(request);
            if (resultado.Success)
            {
                await CargarEmployees();
                ShowForm = false;
            }
            else
            {
                // Manejar el error, mostrar mensaje o realizar alguna acción
            }
        }
        else
        {
            var resultado = await employeeService.Modificar(request);
            if (resultado.Success)
            {
                await CargarEmployees();
                ShowForm = false;
            }
            else
            {
                // Manejar el error, mostrar mensaje o realizar alguna acción
            }
        }
    }

    public void Cancelar()
    {
        ShowForm = false;
        ShowDetails = false;
        request = new EmployeeRequest();
    }

    public void MostrarFormulario()
    {
        ShowForm = true;
        ShowDetails = false;
        request = new EmployeeRequest();
    }

    void Close()
    {
        ShowDetails = false;
    }
    public async Task MostrarDetalles(int employeeId)
    {
        ShowForm = false;
        ShowDetails = true;
        SelectedEmployee = Employees.FirstOrDefault(e => e.Id == employeeId);
    }

    public void Editar(EmployeeResponse employee)
    {
        ShowForm = true;
        ShowDetails = false;
        request = new EmployeeRequest
            {
                Id = employee.Id,
                Name = employee.Name,
                Position = employee.Position
            };
    }

    public async Task Eliminar(EmployeeResponse employee)
    {
        var confirmacion = await JS.InvokeAsync<bool>("confirm", "¿Está seguro de eliminar el empleado?");
        if (confirmacion)
        {
            var resultado = await employeeService.Eliminar(new EmployeeRequest { Id = employee.Id });
            if (resultado.Success)
            {
                await CargarEmployees();
                ShowForm = false;
                ShowDetails = false;
                request = new EmployeeRequest();
            }
            else
            {
                // Manejar el error, mostrar mensaje o realizar alguna acción
            }
        }
    }
}
