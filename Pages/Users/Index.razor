@page "/usuarios"

<MenuDisplay />

@if (!ShowForm)
{
    <h3>Usuarios (@Users.Count)</h3>
    <div class="mb-2">
        <button class="btn btn-success"
            @onclick="()=>{ShowForm = !ShowForm;}">
            Agregar
        </button>
    </div>
}
<div class="container">
    @if (ShowForm)
    {
        <h3>@TituloForm</h3>
        <EditForm Model="request" OnValidSubmit="Send">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="mb-3 input-group">
                <label class="input-group-text">Nombre</label>
                <InputText class="form-control" @bind-Value="@request.Name"></InputText>
            </div>
            <div class="mb-3 input-group">
                <label class="input-group-text">Usuario</label>
                <InputText class="form-control" @bind-Value="@request.Username"></InputText>
            </div>
            <div class="mb-3 input-group">
                <label class="input-group-text">Clave</label>
                <InputText class="form-control" @bind-Value="@request.Password"></InputText>
            </div>
            
            <div class="btn-group">
                <button type="submit" class="btn btn-outline-success">Guardar</button>
                <button @onclick="Cancelar" class="btn btn-outline-danger">Cancelar</button>
            </div>
        </EditForm>
        <br />
    }
    else
    {
        @foreach (var user in Users)
        {
            <div class="card" style="width:18rem;">
                <div class="card-body">
                    <label class="card-title">@user.Name</label>
                    <div class="card-text">
                        <label><b>Usuario:</b> @user.Username</label>
                    </div>
                    <button @onclick="()=>MostrarDetalles(user.Id)" 
                        class="btn btn-info">
                        Detalles
                    </button>
                    <button @onclick="()=>Seleccionar(user.Id)"
                        class="btn btn-warning">
                        Editar
                    </button>
                    <button @onclick="()=>Eliminar(user)"
                        class="btn btn-danger">
                        Eliminar
                    </button>
                </div>
            </div>
        }
    }
    @if (ShowDetails)
    {
        <h3>Detalles del Usuario</h3>
        @if (SelectedUser != null)
        {
            <div class="card" style="width: 18rem;">
                <div class="card-body">
                    <h5 class="card-title">@SelectedUser.Name</h5>
                    <p class="card-text">
                        <b>Usuario:</b> @SelectedUser.Username
                        <b>Clave:</b> @SelectedUser.Password
                    </p>
                    <button @onclick="()=>Editar(SelectedUser)" class="btn btn-warning">
                        Editar
                    </button>
                    <button @onclick="Close" class="btn btn-danger">
                        Close
                    </button>
                </div>
            </div>
        }
        else
        {
            <p>No se ha seleccionado ningún empleado.</p>
        }
    }
</div>
@code {
    public string TituloForm => request.Id == 0 ?
    "Agregar usuario" : "Modificar usuario";

    public bool ShowForm { get; set; } = false;
    public bool ShowDetails { get; set; } = false;
    public string Filtro { get; set; } = "";
    public List<UserResponse> Users { get; set; }
        = new List<UserResponse>();
    public UserResponse SelectedUser { get; set; }


    public UserRequest request { get; set; } = new UserRequest();

    void Cancelar()
    {
        request = new UserRequest();
        ShowForm = false;
    }
    async Task CargarUsuarios()
    {
        var resultado =
        await userServices.Consultar(Filtro);
        if (resultado.Success)
        {
            Users = resultado.Data!;
        }
    }

    void Close()
    {
        ShowDetails = false;
    }
    public async Task MostrarDetalles(int userId)
    {
        ShowForm = false;
        ShowDetails = true;
        SelectedUser = Users.FirstOrDefault(u => u.Id == userId);
    }

    public void Editar(UserResponse user)
    {
        ShowForm = true;
        ShowDetails = false;
        request = new UserRequest
            {
                Id = user.Id,
                Name = user.Name,
                Username = user.Username,
                Password = user.Password
            };
    }

    protected override async Task OnInitializedAsync()
    {
        await CargarUsuarios();
    }

    public async Task Send()
    {
        if (request.Id == 0)
        {
            //Debo registrar el contacto..
            var r = await userServices.Crear(request);
            if (r.Success)
            {
                Cancelar();
                await CargarUsuarios();
                StateHasChanged();
            }
        }
        else
        {
            //Debo solicitar modificar el contacto...
            var r = await userServices.Modificar(request);
            if (r.Success)
            {
                Cancelar();
                await CargarUsuarios();
                StateHasChanged();
            }
        }
    }

    public void Seleccionar(int Id)
    {
        ShowForm = true;
        request = Users
        .Where(c => c.Id == Id)
        .Select(c => c.ToRequest())
        .FirstOrDefault() ?? new UserRequest();
    }

    public async Task Eliminar(UserResponse user)
    {
        var resultado = await userServices.Eliminar(user.ToRequest());
        if (resultado.Success)
        {
            await CargarUsuarios();
            StateHasChanged();
        }
    }

}